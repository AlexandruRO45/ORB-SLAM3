# .github/workflows/build_and_test.yml
name: Build and Test ORB-SLAM3 Wrapper

# Controls when the workflow will run
# TODO: Adjust the branches as needed for your project
on:
  push:
    branches: ["main", "develop", "exp/wrapper-modes-new"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  build-and-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04

    strategy:
      # When true, any failed job in the matrix cancels all other jobs
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - c_compiler: gcc
            cpp_compiler: g++

    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # The 'recursive' option is critical to pull in your Git submodules (e.g., ORB_SLAM3_engine)
      - name: "Checkout Repository and Submodules"
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # 2. Sets up the specified version of Python
      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install all system-level dependencies from your text file
      - name: "Install System Dependencies via Apt"
        run: |
          sudo apt-get update
          # xargs is a robust way to handle the list of packages from the file
          sudo xargs -a apt-dependencies.txt apt-get install -y --no-install-recommends

      # 4. Build and install Pangolin from a specific version tag
      # NOTE: ORB-SLAM3 can be sensitive to the Pangolin version.
      # v0.8 is a modern, stable choice, but you might need to adjust this (e.g., to v0.6)
      # depending on the exact version of the ORB-SLAM3 engine you are using.
      - name: "Build and Install Pangolin v0.8"
        run: |
          # Create a temporary directory for building dependencies to keep the workspace clean
          mkdir ${{ github.workspace }}/third_party_build
          cd ${{ github.workspace }}/third_party_build

          echo "Downloading Pangolin..."
          wget -q https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.9.1.tar.gz -O pangolin.tar.gz
          tar -xzf pangolin.tar.gz
          cd Pangolin-0.9.1
          ./scripts/install_prerequisites.sh required

          echo "Configuring Pangolin build..."
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_TESTS=OFF \
            -DBUILD_PANGOLIN_FFMPEG=OFF \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_CXX_FLAGS="-w"

          echo "Building and installing Pangolin system-wide..."
          # 'sudo' is required to install it into /usr/local/
          sudo cmake --build build --config ${{ matrix.build_type }} --target install

      # 5. Install Python dependencies and trigger the C++ build for your wrapper
      - name: "Install Python Dependencies & Build Project"
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install .[test]

      # 6. Run the test suite
      - name: "Run Pytest Suite"
        run: |
          # The '-v' flag provides verbose output, which is helpful for debugging in CI
          pytest -v
